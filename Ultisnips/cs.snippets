
# vim:ft=snippets:
# == .NET  =================

snippet list "List<...>"
List<${1:int}> ${2:name}
endsnippet

snippet dict "Dictionary<...>"
Dictionary<${1:int}, ${2:int}> ${3:name}
endsnippet

# == Debug  =================

snippet dl "Debug.Log( ... );"
Debug.Log("[`!v expand("%:t:r")`] ${1:Message}");
endsnippet

snippet dlg "Debug.Log( ... , gameObject);" b
Debug.Log("[`!v expand("%:t:r")`] ${1:Message}", gameObject);
endsnippet

snippet dlf "Debug.LogFormat( ... );"
Debug.LogFormat("[`!v expand("%:t:r")`] ${1:Message}", ${2});
endsnippet

snippet dle "Debug.LogError( ... );"
Debug.LogError("[`!v expand("%:t:r")`] ${1:Message}");
endsnippet

snippet dlw "Debug.LogWarning( ... );"
Debug.LogWarning("[`!v expand("%:t:r")`] ${1:Message}");
endsnippet

snippet db "Debug.Break();"
Debug.Break();
endsnippet

# == MonoBehaviour  =================

snippet upd "void Update() { ... }"
void Update()
{
	${1}
}
endsnippet

snippet awk "void Awake() { ... }"
void Awake()
{
	${1}
}
endsnippet

snippet gui "void OnGUI() { ... }"
void OnGUI()
{
	${1}
}
endsnippet

snippet sta "void Start() { ... }"
void Start()
{
	${1}
}
endsnippet

snippet fixed "void FixedUpdate() { ... }"
void FixedUpdate()
{
	${1}
}
endsnippet

snippet late "void LateUpdate() { ... }"
void LateUpdate()
{
	${1}
}
endsnippet

snippet dis "void OnDisable() { ... }"
void OnDisable()
{
	${1}
}
endsnippet

snippet en "void OnEnable() { ... }"
void OnEnable()
{
	${1}
}
endsnippet

snippet des "void OnDestroy() { ... }"
void OnDestroy()
{
	${1}
}
endsnippet

snippet orm "void OnRenerImage(...) { ... }"
void OnRenderImage(RenderTexture src, RenderTexture dest)
{
	Graphics.Blit(src, dest, mat);
}
endsnippet

snippet func "private void Function() { ... }"
void ${1:Function}()
{
	${2}
}
endsnippet

snippet pfunc "public void Function() { ... }"
public void ${1:Function}()
{
	${2}
}

endsnippet
# == Misc ====

snippet gc "GetComponent<Component>();"
GetComponent<${1:Component}>();
endsnippet

snippet ac "AddComponent<Component>();"
AddComponent<${1:Component}>();
endsnippet

snippet rc "[RequireComponent (typeof(TypeName))]"
[RequireComponent (typeof(${1:TypeName}))]
endsnippet

snippet ee "[ExecuteInEditMode]"
[ExecuteInEditMode]
endsnippet

snippet sf "[SerializeField] private GameObject _name;"
[SerializeField]
private ${1:GameObject} _${2:name};
${0}
endsnippet

snippet cor "IEnumerator Coroutine() { ... } "
IEnumerator ${1:Coroutine}()
{
	${2:yield break;}
}

${0}
endsnippet

snippet m "void Method() { ... }"
${1:void} ${2:Methof}(${3:})
{
	${0}
}
endsnippet

snippet sc "StartCoroutine(Coroutine());"
StartCoroutine(${1:Coroutine}());
endsnippet

snippet "wait (\d+\.\d+f?)" "yield return new WaitForSeconds(...);" r
yield return new WaitForSeconds(`!p snip.rv = match.group(1)`);
${0}
endsnippet

snippet wait "yield return new WaitForSeconds(...);"
yield return new WaitForSeconds(${1:time});
endsnippet

#snippet "waitp (\w(\w+|.|\(.*\)))" "yield return promise.Wait()" r
snippet "waitp (.*)" "yield return promise.Wait()" r
yield return `!p snip.rv = match.group(1)`.Wait();
endsnippet

snippet yr "yield return"
yield return
endsnippet

snippet yn "yield return null;"
yield return null;
endsnippet

snippet ya "yield return audioController.VO.WaitPlayVO();"
yield return audioController.VO.WaitPlayVO("${0}");
endsnippet

snippet yuc "yield return new WaitUntil"
yield return new WaitUntil( () => ${0} );
endsnippet

snippet "eepm (\w+)" "Enable position marker" r
environmentController.EnablePosMarker("`!p snip.rv = match.group(1)`");
endsnippet

snippet "egpm (\w+)" "Get position marker" r
var ${1:`!p snip.rv = match.group(1).lower()`} = environmentController.GetXf("`!p snip.rv = match.group(1)`");
endsnippet

snippet "uie (\w+)" "uiController[Button.Name] = true;" r
uiController[Button.`!p snip.rv = match.group(1)`] = true;
endsnippet

snippet "uid (\w+)" "uiController[Button.Name] = true;" r
uiController[Button.`!p snip.rv = match.group(1)`] = false;
endsnippet

snippet but "if (GUILayout.Button(...)) { ... } "
if (GUILayout.Button("${1:Test}")) {
	${0}
}
endsnippet

snippet now "float now = Time.sinceLevelLoad;"
float now = Time.sinceLevelLoad;
endsnippet

snippet dt "Time.deltaTime"
Time.deltaTime
endsnippet

snippet sm "SendMessage(message, null, SendMessageOptions.DontRequireReceiver)"
SendMessage("${1:message}", ${2:null}, ${3:SendMessageOptions.DontRequireReceiver})
endsnippet


# == Data structures ==========

snippet vec2 "var name = new Vector2(x, y);"
new Vector2(${1:x}, ${2:y})
endsnippet

snippet vec3 "var name = new Vector3(x, y);"
new Vector3(${1:x}, ${2:y}, ${3:z})
endsnippet

snippet nvec2 "var name = new Vector2(x, y);"
var ${1:name} = new Vector2(${2:x}, ${3:y});
endsnippet

snippet nvec3 "var name = new Vector3(x, y);"
var ${1:name} = new Vector3(${2:x}, ${3:y}, ${4:z});
endsnippet

snippet nrec "var name = new Vector3(x, y);"
var ${1:name} = new Rect(${2:x}, ${3:y}, ${4:w}, ${5:h});
endsnippet

# == Regons =================


snippet re "#region Events"

#region Events
	${1}
#endregion

${0}
endsnippet

snippet rs "#region Serializable data"

#region Serializable data
	${1}
#endregion

${0}
endsnippet

snippet rp "#region Private fields"

#region Private fields
	${1}
#endregion

${0}
endsnippet

snippet rpu "#region Public methods and properties"

#region Public methods and properties
	${1}
#endregion

${0}
endsnippet

snippet rm "#region MonoBehaviour methods"

#region MonoBehaviour methods
	${1}
#endregion

${0}
endsnippet

snippet rr "Bully regions"

#region Serializable data
#endregion



#region Private fields
#endregion



#region Public methods and properties
#endregion



#region MonoBehaviour methods
#endregion

${0}
endsnippet

# == High level =================


snippet forchilds "#region MonoBehaviour methods"
foreach (Transform ${1:child} in transform)
{
	${0}
}
endsnippet


# == Defines ==================

snippet useed "#if UNITY_EDITOR \n using UnityEditor;"
#if UNITY_EDITOR
	using UnityEditor;
#endif
endsnippet

snippet ifed "#if UNITY_EDITOR .. #endif"
#if UNITY_EDITOR
	${0}
#endif
endsnippet

snippet ifand "#if UNITY_ANDROID .. #endif"
#if UNITY_ANDROID
	${0}
#endif
endsnippet

snippet ifios "#if UNITY_IOS .. #endif"
#if UNITY_IOS
	${0}
#endif
endsnippet

# === XML Documentaion ============
# inline xml documentation
snippet ///
/// <summary>
/// ${0}
/// </summary>
endsnippet

snippet <p
<param name="${1}">${2:$1}</param>
endsnippet

snippet <ex
<exception cref="${1:System.Exception}">${2}</exception>
endsnippet

snippet <r
<returns>${1}</returns>{
endsnippet

snippet <s
<see cref="${1}"/>
endsnippet

snippet <rem
<remarks>${1}</remarks>
endsnippet

snippet <c
<code>${1}</code>
endsnippet

snippet "emit (\w+)" r
if (`!p snip.rv = match.group(1)` != null)
	`!p snip.rv = match.group(1)`();

endsnippet

snippet "emit (\S+) with ((?:\w+)(?:,\s*\w+)*)" r
if (`!p snip.rv = match.group(1)` != null)
	`!p snip.rv = match.group(1)`(`!p snip.rv = match.group(2)`);
endsnippet

# === Unity3d networking snippets ===
snippet netmsg
public void On${1:EventHappend}_handler(NetworkMessage netMsg)
{
	${2:var} ${3:msg} = netMsg.ReadMessage<${4:StringMessage}>();
}
endsnippet

# === Panels generator snippets ===
snippet panels
Panels panels = new Panels()
{
	Groups = new PanelsGroup[]
	{
		${0}
	}
};
endsnippet

snippet panel
new PanelsGroup { name = "${1:PanelsGroupName}", panels = new string[] {"${2:PanelName}"} },
endsnippet

snippet "todo impl" r
//TODO: Implement ${1}!!!
endsnippet

snippet rn "return null;"
return null;
endsnippet

# C# Properties =================
snippet "pro (\w+)" r
public ${1:bool} `!p snip.rv = match.group(1)`
{
	get
	{
		${2}
	}
}
endsnippet

snippet "pr (\w+)" r
public ${1:bool} `!p snip.rv = match.group(1)`
{
	get
	{
		${2}
	}
	set
	{
		${3}
	}
}
endsnippet

# === Templates ===================

snippet mo
class ${0:MyBehaviour} : BaseBehaviour
{
    ${1}
}
endsnippet

snippet mob
class ${0:MyBehaviour} : MonoBehaviour
{
    ${1}
}
endsnippet

snippet mos
class ${0:MyBehaviour} : Singleton<${0}>
{
    ${1}
}
endsnippet

snippet mosp
class ${0:MyBehaviour} : PersistentSingleton<${0}>
{
    ${1}
}
endsnippet

snippet hhh
//===----------------------------------------------------------------------===//
//
//  vim: ft=cs tw=80
//
//  Date:    `!v strftime("%m/%d/%Y %H:%m:%S")`
//  Creator: `git config --global --get "user.name"` <`git config --global --get "user.email"`>
//
//===----------------------------------------------------------------------===//

endsnippet


snippet cm
[ContextMenu("${0}")]
endsnippet

# Big fat template
#`!v ExpandSnippet("hhh")` TODO: find a way for expandiing snippet from snippet
snippet temp "public class FileName : MonoBehaviour"

using UnityEngine;${50:using BullyFramework;}${51:using System.Collections;}

namespace ${1:Namespace}
{
	public class `!p snip.rv = snip.basename or "Untitled"` : MonoBehaviour
	{


#region Serializable data
#endregion



#region Private fields
#endregion



#region Public methods and properties
#endregion



#region MonoBehaviour methods
#endregion


	}
}
endsnippet

snippet findtag
GameObject ${1:go} = GameObject.FindWithTag("${2:tagname}");
if ($1 != null)
{
	${0}
}
endsnippet

snippet ife
#if UNITY_EDITOR
	${0:${VISUAL:code}}
#endif 
endsnippet

snippet sotemp

using UnityEngine;${49:using UnityEditor;}${50:using System;} ${51:using BullyFramework;}${52:using System.Collections;}

namespace ${1:NameSpace}
{
	[CreateAssetMenuAttribute(fileName = "$2", menuName = "$1/DataModel/$2")]
	public class ${2:`!v expand("%:t:r")`}: ScriptableObject
	{
		${0}
	}
}
endsnippet


snippet "iterc (\w+)" r
int len =  `!p snip.rv = match.group(1)`.Count;
for (int ${1:i} = 0; $1 < len; ++$1 )
{
	var it = `!p snip.rv = match.group(1)`[$1];
	${0}
}
endsnippet

snippet "iter (\w+)" r
int len =  `!p snip.rv = match.group(1)`.Length;
for (int ${1:i} = 0; $1 < len; ++$1 )
{
	var it = `!p snip.rv = match.group(1)`[$1];
	${0}
}
endsnippet

snippet "ann (\w+)" r
Assert.IsNotNull(`!p snip.rv = match.group(1)`, " `!p snip.rv = match.group(1)` is null at " + name );
endsnippet


snippet hr
[Header("${0:Description goes here}")]
endsnippet

snippet sp
[Space]
endsnippet

snippet tt
[Tooltip("${0:Description goes here}")]
endsnippet


snippet lazyp
private ${2:Type} ${1:fieldname}_f;
private $2 $1
{
	get
	{
		if($1_f == null)
		{
			$1_f = new $2 ();
			${0}
		}
		return $1_f;
	}
}
endsnippet
